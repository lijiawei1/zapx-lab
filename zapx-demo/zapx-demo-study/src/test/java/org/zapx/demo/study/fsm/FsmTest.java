package org.zapx.demo.study.fsm;

import org.junit.Assert;
import org.junit.Test;

/**
 * Created by Administrator on 2017/11/7 0007.
 */
public class FsmTest {

    /**
     * 2017-10-19 14:37:00	2017-10-19 13:40:00	2017-10-18 20:00:00	2017-09-10 00:00:00	720
     2017-10-18 11:19:00	2017-10-18 10:40:00	2017-10-17 20:00:00	2017-09-26 00:00:00	360
     2017-10-24 14:16:00	2017-10-24 13:30:00	2017-10-23 20:00:00	2017-09-13 00:00:00	600

     2017-10-17 08:32:00	2017-10-16 22:00:00	2017-10-13 20:00:00	2017-09-17 00:00:00	3600
     2017-10-17 08:11:00	2017-10-16 22:30:00	2017-10-13 14:00:00	2017-08-29 00:00:00	4320

     2017-10-21 18:06:00	2017-10-21 17:30:00	2017-10-21 10:00:00	2017-10-09 00:00:00	360
     2017-10-21 16:09:00	2017-10-21 15:50:00	2017-10-21 10:00:00	2017-10-09 00:00:00	240

     2017-10-17 12:41:00	2017-10-17 11:30:00	2017-10-16 20:00:00	2017-09-26 00:00:00	360
     2017-10-12 11:29:00	2017-10-12 11:00:00	2017-10-11 20:00:00	2017-06-20 00:00:00	360
     2017-10-21 14:03:00	2017-10-21 13:30:00	2017-10-20 20:00:00	2017-09-13 00:00:00	600
     2017-10-25 14:48:00	2017-10-25 13:30:00	2017-10-24 20:00:00	2017-06-23 00:00:00	600
     2017-10-09 14:53:00	2017-10-09 11:00:00	2017-10-08 20:00:00	2017-08-15 00:00:00	360
     2017-11-01 14:39:00	2017-11-01 13:30:00	2017-10-31 20:00:00	2017-09-13 00:00:00	600
     */
    /**
     *
     *      2017-10-21 18:06:00	2017-10-21 17:30:00	2017-10-21 10:00:00	2017-10-09 00:00:00	360
     *      2017-10-21 16:09:00	2017-10-21 15:50:00	2017-10-21 10:00:00	2017-10-09 00:00:00	240
     */
    @Test
    public void testEndInMorningFree4Hour() {

        FeeFsm start1 = new FeeFsm("2017-10-21 10:00:00", "2017-10-21 17:30:00").start();
        Assert.assertEquals(start1.getNext_amount(), 360.0, 0.00001);

        FeeFsm start2 = new FeeFsm("2017-10-21 10:00:00", "2017-10-21 15:50:00").start();
        Assert.assertEquals(start2.getNext_amount(), 240.0, 0.00001);
    }

    /**
     *
     2017-10-19 14:37:00	2017-10-19 13:40:00	2017-10-18 20:00:00	2017-09-10 00:00:00	720
     2017-10-18 11:19:00	2017-10-18 10:40:00	2017-10-17 20:00:00	2017-09-26 00:00:00	360
     2017-10-24 14:16:00	2017-10-24 13:30:00	2017-10-23 20:00:00	2017-09-13 00:00:00	600
     *
     */
    @Test
    public void testEndInMorning() {
        FeeFsm start1 = new FeeFsm("2017-10-18 20:00:00", "2017-10-19 13:40:00").start();
        Assert.assertEquals(start1.getNext_amount(), 720.0, 0.00001);

        FeeFsm start2 = new FeeFsm("2017-10-17 20:00:00", "2017-10-18 10:40:00").start();
        Assert.assertEquals(start2.getNext_amount(), 360.0, 0.00001);

        FeeFsm start3 = new FeeFsm("2017-10-23 20:00:00", "2017-10-24 13:30:00").start();
        Assert.assertEquals(start3.getNext_amount(), 600.0, 0.00001);
    }

    /**
     2017-10-17 08:32:00	2017-10-16 22:00:00	2017-10-13 20:00:00	2017-09-17 00:00:00	3600
     2017-10-17 08:11:00	2017-10-16 22:30:00	2017-10-13 14:00:00	2017-08-29 00:00:00	4320
     */
    @Test
    public void testMultiDays() {
        FeeFsm start1 = new FeeFsm("2017-10-13 20:00:00", "2017-10-16 22:00:00").start();
        Assert.assertEquals(start1.getNext_amount(), 3600, 0.00001);

        //240+1200+1200+1200
        FeeFsm start2 = new FeeFsm("2017-10-13 14:00:00", "2017-10-16 22:30:00").start();
        Assert.assertEquals(start2.getNext_amount(), 4320, 0.00001);

    }
}
